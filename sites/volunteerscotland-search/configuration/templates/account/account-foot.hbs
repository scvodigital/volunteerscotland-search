<script src="{{~>asset_url url='downloader.js'~}}"></script>
<script>


  function stopAllNewsletters(event) {
    var redirectDone = false;
    event.preventDefault();
    var subs = {{{default (stringify @root.data.user-newsletter-subscriptions) []}}};
    $.ajax({
        type: "GET",
        url: "/remove-newsletter-subscription/" + subs.join(),
      })
    $( ".nl-link-block" ).text("Unsubscribed");
  }

  function exportUserData() {
    var dataUrl = 'data:application/json;base64,{{{btoa @root.data.export_user_data}}}';
    download(dataUrl, 'user-export.json', 'application/json');
  };
  $(document).ready(function() {
    var $changePassword = $('#change-password');
    var $password1 = $('#change-password-password');
    var $password2 = $('#change-password-confirm');

    $('[data-provider-link]').each(function(i, o) {
      var $chip = $(o);
      var $linkAction = $chip.find('.link-action');
      var chip = new mdc.chips.MDCChip(o);
      var providerName = $chip.data('provider-link');

      $chip.on('click', function(evt) {
        if (!$chip.data('disabled')) {
          $chip.data('disabled', true);
          $chip.css('opacity', 0.5);
          var selected = $chip.hasClass('mdc-chip--selected');
          if (!selected) {
            volunteerscotland.auth.linkWithProvider(providerName).then(function(result) {
              console.log('Linked to', providerName, result);
              chip.foundation_.setSelected(!selected);
              $linkAction.text('Unlink from');
              $chip.data('disabled', false);
              $chip.css('opacity', 1);
              checkProviders();
            }).catch(function(err) {
              console.error('Failed to link to', providerName, err);
              $chip.data('disabled', false);
              $chip.css('opacity', 1);
              checkProviders();
              window.setTimeout(function() {
                window.location.href = '/sign-in?reauth=true';
              }, 1000);
            });
          } else {
            volunteerscotland.auth.unlinkFromProvider(providerName).then(function(result) {
              console.log('Unlinked from', providerName, result);
              chip.foundation_.setSelected(!selected);
              $linkAction.text('Link to');
              $chip.data('disabled', false);
              $chip.css('opacity', 1);
              checkProviders();
            }).catch(function(err) {
              console.error('Failed to unlink from', providerName, err);
              $chip.data('disabled', false);
              $chip.css('opacity', 1);
              checkProviders();
              if (err.code === 'auth/requires-recent-login') {
                window.setTimeout(function() {
                  window.location.href = '/sign-in?reauth=true';
                }, 1000);
              }
            });
          }
        }
      });
    }); 

    function checkProviders() {
      var enabled = volunteerscotland.auth.providerIds.length > 1;
      $('.mdc-chip--selected[data-provider-link]')
        .data('disabled', !enabled)
        .css({
          'opacity': enabled ? 1 : 0.5,
          'cursor': enabled ? 'pointer' : 'default'
        })
        .attr('title', !enabled ? 'You cannot unlink your social account as you are using it to sign in' : '');
    }

    $changePassword.on('click', changePassword);
    $password1.on('keypress', function(evt) {
      if (evt.which === 13) {
        $password2.focus();
      }
    });
    $password2.on('keypress', function(evt) {
      if (evt.which === 13) {
        changePassword();
      }
    });

    function changePassword() {
      var password1 = $password1.val();
      var password2 = $password2.val();
      volunteerscotland.disable([$changePassword, $password1, $password2]);

      volunteerscotland.auth.changePassword(password1, password2).then(function() {
        volunteerscotland.snackbarShow({
          message: 'Password changed, please wait',
        });
        window.setTimeout(function() {
          window.location.reload();
        }, 1000);
      }).catch(function(err) {
        volunteerscotland.disable([$changePassword, $password1, $password2], false);
        $password1.val('');
        $password2.val('');
        $password1.focus();
        volunteerscotland.snackbarShow({
          message: err.message || 'There was a problem changing your password',
          backgroundColor: '#dd4b39'
        });
        if (err.code === 'auth/requires-recent-login') {
          window.setTimeout(function() {
            window.location.href = '/sign-in?reauth=true';
          }, 1000);
        }
        return;
      });
    }
  });
</script>